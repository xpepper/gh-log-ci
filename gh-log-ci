#!/usr/bin/env bash

set -euo pipefail

# Determine branch:
# 1. If user passed an argument, use it.
# 2. Else attempt to get default branch via gh repo view.
# 3. Fallback order: detected default -> master -> main -> current HEAD branch.
if [[ $# -ge 1 ]]; then
  BRANCH="$1"
else
  # Try GitHub CLI default branch discovery
  GH_DEFAULT_BRANCH="$(gh repo view --json defaultBranchRef --jq .defaultBranchRef.name 2>/dev/null || true)"
  if [[ -n "${GH_DEFAULT_BRANCH}" ]]; then
    BRANCH="${GH_DEFAULT_BRANCH}"
  else
    # Fallbacks: prefer master if exists, else main
    if git show-ref --verify --quiet refs/heads/master || git ls-remote --exit-code origin master &>/dev/null; then
      BRANCH="master"
    elif git show-ref --verify --quiet refs/heads/main || git ls-remote --exit-code origin main &>/dev/null; then
      BRANCH="main"
    else
      # Use current HEAD branch name
      BRANCH="$(git rev-parse --abbrev-ref HEAD 2>/dev/null || echo master)"
    fi
  fi
fi

# Detect remote URL for origin or fallback to first remote
REMOTE_URL=$(git remote get-url origin 2>/dev/null || git remote get-url "$(git remote | head -n1)" 2>/dev/null || true)
if [[ -z "${REMOTE_URL:-}" ]]; then
  echo "Error: Could not detect Git remote URL." >&2
  exit 1
fi

# Parse OWNER and REPO from GitHub remote URL (optional .git suffix)
if [[ "$REMOTE_URL" =~ github.com[:/]([^/]+)/([^/]+)(\.git)?$ ]]; then
  OWNER="${BASH_REMATCH[1]}"
  REPO="${BASH_REMATCH[2]}"
  REPO="${REPO%.git}"
else
  echo "Error: Remote URL is not a recognized GitHub URL." >&2
  exit 1
fi

# Ensure we have remote branch; fetch quietly, tolerate missing remote branch gracefully.
if git ls-remote --exit-code origin "$BRANCH" &>/dev/null; then
  git fetch origin "$BRANCH" --quiet
else
  echo "Warning: Remote branch '$BRANCH' not found on origin. Using local branch if available." >&2
fi

echo "$REPO"

# Build a format with: <plain SHA><TAB><colored pretty message>
# Use %x09 for a literal TAB (portable) so we can split safely.
FORMAT='%H%x09%Cred%h%Creset -%C(auto)%d%Creset %s %Cgreen(%ad) %C(bold blue)<%an>%Creset'

echo
echo "Commit status for $OWNER/$REPO ($BRANCH):"
echo "-----------------------------------------"

git log "origin/$BRANCH" --color=always --pretty="$FORMAT" -n 15 |
while IFS=$'\t' read -r SHA MESSAGE; do
  # Query GitHub check runs for this commit
  CHECK_CONCLUSIONS=$(gh api "/repos/$OWNER/$REPO/commits/$SHA/check-runs" --jq '.check_runs[].conclusion' 2>/dev/null || true)

  ICON="❔"
  if [[ -z "$CHECK_CONCLUSIONS" ]]; then
    ICON="🕓"
  elif echo "$CHECK_CONCLUSIONS" | grep -qE 'failure|timed_out|action_required'; then
    ICON="❌"
  elif echo "$CHECK_CONCLUSIONS" | grep -q 'cancelled'; then
    ICON="🚫"
  elif echo "$CHECK_CONCLUSIONS" | grep -q 'success'; then
    ICON="✅"
  else
    ICON="🕓"
  fi

  echo "$ICON  $MESSAGE"
done

echo
